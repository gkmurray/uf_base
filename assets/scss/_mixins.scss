/******************************************************************

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants.

******************************************************************/

/*********************
TOOLS
*********************/

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


/*********************
COLORS
*********************/


/*********************
TYPOGRAPHY
*********************/
/*	@font-face {
		font-family: 'Font Name';
		src: url('assets/fonts/font-name.eot');
		src: url('assets/fonts/font-name.eot?#iefix') format('embedded-opentype'),
			 url('assets/fonts/font-name.woff') format('woff'),
			 url('assets/fonts/font-name.ttf') format('truetype'),
			 url('assets/fonts/font-name.svg#font-name') format('svg');
		font-weight: normal;
		font-style: normal;
	}
*/

//Use the best ampersand - http://simplebits.com/notebook/2008/08/14/ampersands-2/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

/*********************
CSS3 GRADIENTS.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
Function to create an optimized svg url
*********************/

//Usage svg-url("<svg xmlns='http://www.w3.org/2000/svg' viewBox='x x x x'><defs><style>.class{class styles}</style></defs><path data class='class'/></svg>");
@function svg-url($svg){
	//
	//  Add missing namespace
	//
	@if not str-index($svg,xmlns) {
		$svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');   
	}		
	//	
	//  Chunk up string in order to avoid 
	//  "stack level too deep" error
	//	 
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg)/$slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1); 
		//
		//   Encode 
		//
		$chunk: str-replace($chunk,'"', '\'');
		$chunk: str-replace($chunk,'%', '%25');
		$chunk: str-replace($chunk,'&', '%26');
		$chunk: str-replace($chunk,'#', '%23');	   
		$chunk: str-replace($chunk,'{', '%7B');
		$chunk: str-replace($chunk,'}', '%7D');		 
		$chunk: str-replace($chunk,'<', '%3C');
		$chunk: str-replace($chunk,'>', '%3E');
		
		// 
		//	The maybe list 
		//
		//	Keep size and compile time down
		//	... only add on documented fail 
		// 
		//  $chunk: str-replace($chunk, '|', '%7C');
		//  $chunk: str-replace($chunk, '[', '%5B');
		//  $chunk: str-replace($chunk, ']', '%5D');
		//  $chunk: str-replace($chunk, '^', '%5E');
		//  $chunk: str-replace($chunk, '`', '%60');
		//  $chunk: str-replace($chunk, ';', '%3B');
		//  $chunk: str-replace($chunk, '?', '%3F');
		//  $chunk: str-replace($chunk, ':', '%3A');
		//  $chunk: str-replace($chunk, '@', '%40');
		//  $chunk: str-replace($chunk, '=', '%3D');	  
		
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice; 
	}
	@return url("data:image/svg+xml,#{$encoded}");   
}
		
//  Background svg mixin		  
@mixin background-svg($svg){
	background-image: svg-url($svg);		
}		
			
//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search); 
	@return if($index, 
		str-slice($string, 1, $index - 1) + $replace + 
		str-replace(str-slice($string, $index + 
		str-length($search)), $search, $replace), 
		$string); 
}			  
